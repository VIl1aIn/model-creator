Введение
--------

Это набор макросов для генерации radshell скриптов по упрощенному
конфигурационному файлу. radshell нужен для создания сервисов в
модели, т.к. создавать через GUI множество (особенно однотипных)
сервисов неудобно и неэффективно.

Версия глубокая альфа, сделан минимально необходимый функционал.

ВНИМАНИЕ!!!

Макросы не проверяют правильность заполнения переменных, атрибутов и
наличие сервисов и шаблонов. Поэтому созданный radshell может не
отработать на реальном сервере моделей.

Что сейчас сделано
------------------

По сервисам:

- Создание сервисов
- Заполнение атрибутов значениями (можно заполнять несколько правил)
- Создание зависимостей для сервисов
- Заполнение пользовательских атрибутов

По шаблонам:

Создание шаблона пустышки, т.е. без определения правил и с картинкой
"по-умолчанию".

Можно добавить в шаблон правило типа "Numerical Formula Rule".

Можно задать пользовательские атрибуты типа: "Ответственность",
"Регион" и их значения по умолчанию

В шаблон можно добавить простую зависимость типа "Good, Marginal, Bad
Aggregation Rule".


Структура папок:
----------------

radshell - рабочая папка для создания конфигурационных файлов. В ней
выполняются все действия пользователя.

m4 - каталог с макросами общими для всех остальных определений

service - макросы для создания сервисов и атрибутов к ним

template - макросы для создания шаблонов и правил.

Как использовать:
-----------------

1. Заходим в папку radshell
2. Создаем файл с описанием сервисной модели, например, model_1.mc
3. Генерируем скипт radshell командой:

m4 ../m4/radshell.m4 model_1.mc

4. На стандартном выходе имеем готовый скрипт. Если необходимо
используем перенаправление в нужный файл.

Синтаксис (команды)
-------------------

Для комментирования строки используем команду m4 'dnl', если надо
закомментировать несколько строк - команда 'ifelse()'. См. пример в
отдельном файле.

ВНИМАНИЕ: Символ '#' комментирует строку для препроцессора
(т.е. строка не будет выполнена), но будет участвовать в выводе
окончательного radsh. Исключение первые строки (те что идут в поток
"-1").

Можно использовать стандартные макросы языка m4.

Например: define(`varSrv',`Длинное_и_часто_повторяемое_имя_сервиса')

После этого можно вместо имени сервиса использовать короткое название
"varSrv" во всех конструкциях.

Используются макросы:

TEMPL_SERV(Имя_шаблона_1[,Имя_шаблона_2,...,Имя_шаблона_n]) -
устанавливает имена шаблонов для создания сервиса и привязки его к
этим шаблонам. Используется только для СЕРВИСОВ, на атрибуты и шаблоны
не влияет. Имеет приоритет над макросом TEMPL_NAME при создании
сервисов. Т.е. все сервисы будут создаваться именно с этими
шаблонами. Для отмены используем макрос
undefine(`TMPL_SRV'). ВНИМАНИЕ!!! Не TEMPL_SERV

TEMPL_NAME(Имя шаблона) - устанавливает имя шаблона, который будет
использоваться в дальнейших операциях (например, значения для правил в
сервисах), в том числе и для создания сервисов. Имя может быть только
одно, для нескольких шаблонов используем команду TEMPL_SERV.

TEMPL_ATTR(Имя правила, Имя поля 1, Имя поля 2, ...) - задает имя
правила и имена полей, которые будут заполнятся при вызове команды
заполнения атрибутов в сервисе. Имя шаблона используется из
определения TEMPL_NAME.

TEMPLATE(Имя шаблона, Описание шаблона) - создаёт в выходном потоке
команды генерации шаблона-"пустышки".

ЗАМЕЧАНИЕ: переопределяет "Имя шаблона", т.е. TEMPL_NAME, поэтому
следим за очередностью определений.

NUM_FORMULA(Имя правила, Формула, Имя политики, Политика, Marginal
порог, Bad порог) - создаёт правило "Numerical Formula Rule".

USER_ATTR(Имя атрибута, Значение по-умолчанию) - в текущий шаблон
добавляется пара атрибут - значение по-умолчанию. Если надо несколько
атрибутов, повторить команду.

WORST_DEP(Имя шаблона, Имя правила, Bad, Marginal,
isChildInstancePropagation) - создает простое правило "Good, Marginal,
Bad Aggregation Rule". где:

    isChildInstancePropagation - true или false в зависимости от того как
надо распространять статус.

    Bad, Marginal - какое состояние сервиса будет в зависимости от
состояния потомка.

SERVICE(Имя сервиса,Display Name,Description) - создает команды для
сервиса с заданными полями. Если внутри полей (кроме имени сервиса)
надо использовать ", то задействуем \ (экранирование). Пример смотрим
в примере :)

VALUES(Имя сервиса,Значение атрибута 1, Значение атрибута 2, ...) -
Заполняет атрибуты в указанном сервисе указанными значениями. Имена
полей берутся из определения TEMPL_ATTR.

VALUES_NEXT(Имя сервиса,{1|2|3|4...}, Значение атрибута 1,
		Значение атрибута 2, ...) - Заполняет атрибуты в
указанном сервисе указанными значениями. Имена полей берутся из
определения TEMPL_ATTR. Применяется когда необходимо установить
несколько значений одного и того же правила в сервисе. Порядок правил
со значениями задаётся числами от 1 до максимального поддерживаемого
radshell. Макросом корректность чисел и их порядок не проверяется, так
что следим самостоятельно. Если есть первое значение уже установлено
из VALUES(), то VALUES_NEXT() нумеровать можно с 2. См. пример в файле
sampleService.mc

USER_INST(Имя сервиса, Имя атрибута, Значение) - Заполняет
пользовательский атрибут в сервисе значением, желательно давать после
команды VALUES, т.к. она выполняет предварительную очистку всех
значений. Если надо заполнить несколько атрибутов, то команда даётся
несколько раз. Используется, например, для задания атрибута
RESPONSIBLE ("Ответственность")

PARENT(Имя сервиса) - задает имя сервиса, который будет использоваться
как родитель в дальнейших командах CHILD.

CHILD(Имя сервиса 1, Имя сервиса 2, ...) - создаёт связки
родитель-потомок в выходном потоке.

ПРИМЕЧАНИЯ
----------

Примеры использования макросов приводятся в файле
sampleService.mc. Его можно использовать как шаблон для написания
своих конфигураций.
